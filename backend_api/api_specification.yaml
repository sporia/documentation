openapi: 3.0.0
servers: 
  - url: https://www.sporia.ch/TODO

info:
  description: |
    API to access court and reservation information for
    Sporia customer's courts
  version: "1.0.0"
  title: Sporia Backend API
  contact:
    email: samuel.pearce@sporia.ch
    
tags:
  - name: Auth
    description: |
      Endpoints required for authentication
  - name: Options
    description: |
      Endpoints for editing and retrieving tenant preferences
  - name: User
    description: |
      Endpoints that manage user entries
  - name: Court
    description: |
      Endpoints that manage court entries
  - name: Category
    description: |
      Endpoints that manage category entries
  - name: Timeblock
    description: |
      Endpoints that manage timeblock entries
  - name: Reservation
    description: |
      Endpoints that manage reservation entries

      
paths:
  /token:
    post:
      tags:
        - Auth
      summary: Get refresh token & access token
      description: |
        Authenticates the user with username & password
        and responds with access token and refresh token
        Note: grant_type should be "password" for front-end.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - username
                - password
              properties:
                grant_type:
                  type: string
                  format: grant_type
                  example: password
                username:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: |
            Successfully authenticated the user's credentials
            and responds with access token and refresh token
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - token_type
                  - expires_in
                  - refresh_token
                properties:
                  access_token:
                    $ref: '#/components/schemas/Token'
                  token_type:
                    type: string
                    format: token_type
                    example: bearer
                  expires_in:
                    type: integer
                    format: seconds
                    example: 3600
                  refresh_token:
                    $ref: '#/components/schemas/Token'
        '400':
          description: |
            Authentication failed. Error code is
            given in response. See RFC 6749, Section
            5.2 for a list of responses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:       # Note: This endpoint may also be implemented as POST, varying
      tags:    #       based on the "grant_type" alone.
        - Auth
      summary: Get access token
      description: |
        Authenticates the user with username & password
        and responds with access token and refresh token
        Note: grant_type must be "refresh_token".
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - refresh_token
              properties:
                grant_type:
                  type: string
                  format: grant_type
                  example: password
                username:
                  $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: |
            Successfully authenticated the user's credentials
            and responds with access token
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - token_type
                  - expires_in
                properties:
                  access_token:
                    $ref: '#/components/schemas/Token'
                  token_type:
                    type: string
                    format: token_type
                    example: bearer
                  expires_in:
                    type: integer
                    format: seconds
                    example: 3600
        '400':
          description: |
            Authentication failed. Error code is
            given in response. See RFC 6749, Section
            5.2 for a list of responses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /options:
    get:
      tags:
        - Options
      summary: Get Options
      description: |
        Returns the lis of JSON key pairs that
        define the options for this tenant
        
        See [the documentation](https://github.com/sporia/documentation/wiki/Tenant-Options)
        for a comprehensive list of options.
      security:
        - BearerToken: []
      responses:
        '200':
          description: |
            The tenant's options in JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options'
    put:
      tags:
        - Options
      summary: Set Options
      description: |
        Takes a json object of options with their new values
        and assigns them accordingly.
        
        See [the documentation](https://github.com/sporia/documentation/wiki/Tenant-Options)
        for a comprehensive list of options.
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Options'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            One or any of the parameters is invalid.
            An error message is returned with more info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
          

  /user:
    post:
      tags:
        - User
      summary: Create User
      description: |
        Adds a user to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided user object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - User
      summary: Get Users
      description: |
        Returns an array of all users
      security:
        - BearerToken: []
      responses:
        '200':
          description: |
            A list of users or a single user entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /user/import:
    post:
      tags:
        - User
      summary: Import Users
      description: |
        Takes a list of users and
        adds them all at once
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided user object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /user/{user_id}:
    get:
      tags:
        - User
      summary: Get User
      description: |
        Returns a single user entry matching
        the provided user id
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: user_id
          description: |
            The UUID of the user being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: |
            A user entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: |
            The provided user ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No user with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - User
      summary: Edit User
      description: |
        Takes a user object and updates the
        given user accordingly. ID cannot be
        changed. Any fields left out of the
        request will be left as they are.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: user_id
          description: |
            The UUID of the user being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided user ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No user with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - User
      summary: Delete User
      description: |
        Takes a user's ID and deletes them
        from the database, permanently
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: user_id
          description: |
            The UUID of the user being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided user ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No user with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /court:
    post:
      tags:
        - Court
      summary: Create Court
      description: |
        Adds a court to the database
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Court'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided court object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Court
      summary: Get Courts
      description: |
        Returns an array of all courts.
      security:
        - BearerToken: []
      responses:
        '200':
          description: |
            A list of courts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Court'

  /court/import:
    post:
      tags:
        - Court
      summary: Import Courts
      description: |
        Takes a list of courts and
        adds them all at once
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Court'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided court object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /court/{court_id}:
    get:
      tags:
        - Court
      summary: Get Court
      description: |
        Returns a single court entry
        and requires a court's ID.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: court_id
          description: |
            The UUID of the court being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: |
            A single court entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Court'
        '400':
          description: |
            The provided court ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No court with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Court
      summary: Edit Court
      description: |
        Takes a court object and updates the
        given court accordingly. ID cannot be
        changed. Any fields left out of the
        request will be left as they are.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: court_id
          description: |
            The UUID of the court being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Court'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided court ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No court with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Court
      summary: Delete Court
      description: |
        Takes a court's ID and deletes it
        from the database, permanently
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: court_id
          description: |
            The UUID of the court being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided court ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No court with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /category:
    post:
      tags:
        - Category
      summary: Create Category
      description: |
        Adds a category to the database
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided category object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Category
      summary: Get Categories
      description: |
        Returns an array of all categories.
      security:
        - BearerToken: []
      responses:
        '200':
          description: |
            A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /category/import:
    post:
      tags:
        - Category
      summary: Import Categories
      description: |
        Takes a list of categories and
        adds them all at once
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Category'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided category object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /category/{cat_id}:
    get:
      tags:
        - Category
      summary: Get Category
      description: |
        Returns a single category entry
        and requires a category's ID.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: cat_id
          description: |
            The UUID of the category being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: |
            A single category entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: |
            The provided category ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No category with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Category
      summary: Edit Category
      description: |
        Takes a category object and updates the
        given category accordingly. ID cannot be
        changed. Any fields left out of the
        request will be left as they are.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: cat_id
          description: |
            The UUID of the category being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided category ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No category with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Category
      summary: Delete Category
      description: |
        Takes a category's ID and deletes it
        from the database, permanently
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: cat_id
          description: |
            The UUID of the category being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided category ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No category with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /timeblock:
    post:
      tags:
        - Timeblock
      summary: Create Timeblock
      description: |
        Adds a time-block to the database
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timeblock'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided time-block object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Timeblock
      summary: Get Timeblocks
      description: |
        Returns an array of all time-blocks.
      security:
        - BearerToken: []
      responses:
        '200':
          description: |
            A list of time-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeblock'
                  
  /timeblock/import:
    post:
      tags:
        - Timeblock
      summary: Import Timeblocks
      description: |
        Takes a list of time-blocks and
        adds them all at once
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeblock'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided time-block object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /timeblock/{time_id}:
    get:
      tags:
        - Timeblock
      summary: Get Timeblock
      description: |
        Returns a single time-block entry
        and requires a time-block's ID.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: time_id
          description: |
            The UUID of the time-block being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: |
            A single time-block entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeblock'
        '400':
          description: |
            The provided time-block ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No time-block with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Timeblock
      summary: Edit Timeblock
      description: |
        Takes a time-block object and updates the
        given time-block accordingly. ID cannot be
        changed. Any fields left out of the
        request will be left as they are.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: time_id
          description: |
            The UUID of the time-block being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timeblock'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided time-block ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No time-block with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Timeblock
      summary: Delete Timeblock
      description: |
        Takes a time-block's ID and deletes it
        from the database, permanently
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: time_id
          description: |
            The UUID of the time-block being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided time-block ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No time-block with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /reservation:
    post:
      tags:
        - Reservation
      summary: Create Reservation
      description: |
        Adds a reservation to the database
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided reservation object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Reservation
      summary: Get Reservations
      description: |
        Returns an array of all reservations.
      security:
        - BearerToken: []
      responses:
        '200':
          description: |
            A list of reservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTO'

  /reservation/import:
    post:
      tags:
        - Reservation
      summary: Import Timeblocks
      description: |
        Takes a list of reservations and
        adds them all at once
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Reservation'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided reservation object does not match the
            requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reservation/{res_id}:
    get:
      tags:
        - Reservation
      summary: Get Reservation
      description: |
        Returns a single reservation entry
        and requires a reservation's ID.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: res_id
          description: |
            The UUID of the reservation being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: |
            A single reservation entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTO'
        '400':
          description: |
            The provided reservation ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No reservation with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Reservation
      summary: Edit Reservation
      description: |
        Takes a reservation object and updates the
        given reservation accordingly. ID cannot be
        changed. Any fields left out of the
        request will be left as they are.
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: res_id
          description: |
            The UUID of the reservation being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided reservation ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No reservation with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Reservation
      summary: Delete Reservation
      description: |
        Takes a reservation's ID and deletes it
        from the database, permanently
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: res_id
          description: |
            The UUID of the reservation being requested
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: |
            The server successfully processed the request,
            and is not returning any content.
        '400':
          description: |
            The provided reservation ID is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            No reservation with the given ID could be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
        
    
  schemas:
    Options:
      type: object
      required:
        - AllowUserRegistration
      properties:
        AllowUserRegistration:
          type: boolean
          format: boolean
          example: false
  
    User:
      type: object
      required:
        - user_id
        - email
        - password
        - first_name
        - last_name
      properties:
        user_id:
          $ref: '#/components/schemas/UUID'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        first_name:
          type: string
          format: name
          example: John
        last_name:
          type: string
          format: name
          example: Smith

    UserResponse:
      type: object
      required:
        - user_id
        - email
        - first_name
        - last_name
      properties:
        user_id:
          $ref: '#/components/schemas/UUID'
        email:
          $ref: '#/components/schemas/Email'
        first_name:
          type: string
          format: name
          example: John
        last_name:
          type: string
          format: name
          example: Smith
    
    Court:
      type: object
      required:
        - court_id
        - number
        - is_indoors
        - is_active
        - pos_x
        - pos_y
        - pos_angle
      properties:
        court_id:
          $ref: '#/components/schemas/UUID'
        number:
          type: string
          format: court_number
          example: 13b
        is_indoors:
          type: boolean
          format: boolean
          example: true
        is_active:
          type: boolean
          format: boolean
          example: true
        comment:
          type: string
          format: comment
          example: This court is out of service at the moment due to repairs
        pos_x:
          type: integer
          format: coordinate
          example: 72
        pos_y:
          type: integer
          format: coordinate
          example: 25
        pos_angle:
          type: integer
          format: angle
          example: 45
    
    Category:
      type: object
      required:
        - category_id
        - name
      properties:
        category_id:
            $ref: '#/components/schemas/UUID'
        name:
          type: string
          format: name
          example: Tournament
        comment:
          type: string
          format: comment
          example: This category involves...
    
    Timeblock:
      type: object
      required:
       - start
       - end
       - availability
      properties:
        start:
          type: string
          format: time
          example: "12:00"
        end:
          type: string
          format: time
          example: "13:00"
        availability:
          description: |
            Determines whether this time block
            can be booked or not.
          type: boolean
          format: boolean
          example: false

    Reservation:
      type: object
      required:
       - date
       - timeblock_id
       - category_id
       - court_id
      properties:
        date:
          type: string
          format: ISO-8601
          example: "1871-09-02"
        timeblock_id:
          $ref: '#/components/schemas/UUID'
        comment:
          type: string
          format: text
          example: "This is a reservation comment"
        category_id:
          $ref: '#/components/schemas/UUID'
        court_id:
          $ref: '#/components/schemas/UUID'

    ReservationDTO:
      type: object
      required:
       - date
       - timeblock
       - comment
       - category
       - court
      properties:
        date:
          type: string
          format: ISO-8601
          example: "1871-09-02"
        timeblock:
          $ref: '#/components/schemas/Timeblock'
        comment:
          type: string
          format: text
          example: "This is a reservation comment"
        category:
          $ref: '#/components/schemas/Category'
        court:
          $ref: '#/components/schemas/Court'
    
    Error:
      description: |
        A machine-readable error code and a description of what
        went wrong.
        
        For a list of all possible error codes and their
        meanings, see [the documentation](https://github.com/sporia/documentation/wiki/API-Error-Codes)
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          format: ascii
          example: invalid_request
        error_description:
          type: string
          format: ascii
          example: The request is missing a required parameter
        error_url:
          type: string
          format: uri
          example: https://www.sporia.ch/support/api/invalid_request
        
    
    Token:
      type: string
      format: JWT
      example: |
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ
        .SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    UUID:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
    Email:
      type: string
      format: email
      example: john.smith@example.org
    Password:
      type: string
      format: password
      example: correcthorsebatterystaple